name: "Python Poetry Setup"
description: "A Github Action to setup Poetry and caching for Poetry Virtual Environments."
author: "Ali Samji <ali@ybor.ai>"

inputs:
  poetry-version:
    description: "The version of poetry to install. If not specified, defaults to the latest."
    required: false
  python-version:
    description: "The version of Python to install. If not specified, does not modify the system-installed python."
    required: false

outputs:
  poetry-version:
    description: "The version of poetry actually installed."
    value: ${{ steps.version.outputs.poetry }}
  python-version:
    description: "The version of Python actually installed."
    value: ${{ steps.version.outputs.python }}

runs:
  using: "composite"
  steps:
    - name: Setup Python
      if: ${{ !inputs.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ inputs.python-version }}

    - name: Determine Pipx cache values
      id: pipx-cache-helper
      shell: bash
      run: |
        echo 'paths<<EOF' >> $GITHUB_OUTPUT
        echo "$(pipx environment --value PIPX_BIN_DIR)/poetry" >> $GITHUB_OUTPUT
        echo "$(pipx environment --value PIPX_LOCAL_VENVS)/poetry" >> $GITHUB_OUTPUT
        echo 'EOF' >> $GITHUB_OUTPUT

    # Due to pipx's usage of virtual environments, the python version does not actually
    # matter for caching purposes.
    - name: Cache Poetry Installation
      uses: actions/cache@v3
      with:
        path: ${{ steps.pipx-cache-helper.outputs.paths }}
        key: pipx-poetry-${{ runner.os }}-${{ inputs.poetry-version }}
        restore-keys: |
          pipx-poetry-${{ runner.os }}

    - name: Install Poetry (Latest)
      if: ${{ !inputs.poetry-version }}
      shell: bash
      run: |
        pipx install poetry

    - name: Install Poetry (${{ inputs.poetry-version }})
      if: ${{ inputs.poetry-version }}
      shell: bash
      run: |
        pipx install 'poetry==${{ inputs.poetry-version }}'

    # TODO: Add support for less strict versioning. (IE '^{version}' instead of just '=={version}')

    - name: Setup Poetry Virtual Environment Caching
      uses: actions/cache@v3
      with:
        path: ./.venv
        key: poetry-venv-${{ runner.os }}-${{ hashFiles('poetry.lock') }}
        restore-keys: |
          poetry-venv-${{ runner.os }}

    - name: Setup Environment Variables to Configure Poetry
      shell: bash
      run: |
        echo 'POETRY_VIRTUALENVS_IN_PROJECT=1' >> $GITHUB_ENV
        echo 'POETRY_VIRTUALENVS_CREATE=1' >> $GITHUB_ENV

    - name: Get Versions
      shell: bash
      id: version
      run: |
        echo "poetry=$(poetry --version | awk -F'[) (]' '{print $4}')" >> $GITHUB_OUTPUT
        echo "poetry=$(python --version | awk -F'[) (]' '{print $2}')" >> $GITHUB_OUTPUT

# Define the branding for the action in the GitHub Marketplace
branding:
  icon: "award"
  color: "blue"

name: "Python Poetry Setup"
description: "A Github Action to setup Python, Poetry, and caching for Poetry Virtual Environments."
author: "Ali Samji <ali@ybor.ai>"

# Define the inputs for this action
inputs:
  version:
    description: "The version of poetry to install. If not specified, defaults to the latest."
    required: false

# Define the outputs for this action
outputs:
  version:
    description: "The version of poetry actually installed."
    value: ${{ steps.version.outputs.poetry }}

# Define the runs configuration
runs:
  using: "composite"
  steps:
    - name: Determine Pipx cache keys
      shell: bash
      run: |
        pipx environment --value PIPX_BIN_DIR
        pipx environment --value PIPX_LOCAL_VENVS
        exit 1

    # - name: Cache Poetry Installation
    #   uses: actions/cache@v3
    #   with:
    #     path: ./.venv
    #     key: poetry-venv-${{ runner.os }}-${{ hashFiles('poetry.lock') }}
    #     restore-keys: |
    #       poetry-venv-${{ runner.os }}

    - name: Install Poetry (Latest)
      if: ${{ !inputs.version }}
      shell: bash
      run: |
        pipx install poetry

    - name: Install Poetry (${{ inputs.version }})
      if: ${{ inputs.version }}
      shell: bash
      run: |
        pipx install 'poetry==${{ inputs.version }}'

    # TODO: Add support for less strict versioning. (IE '^{version}' instead of just '=={version}')

    # TODO: Add caching of poetry virtualenv based on poetry.lock
    # - name: Setup Cache
    #   uses: actions/cache@v3
    #   with:
    #     path: ./.venv
    #     key: poetry-venv-${{ runner.os }}-${{ hashFiles('poetry.lock') }}

    - name: Get Versions
      shell: bash
      id: version
      run: |
        echo "poetry=$(poetry --version | awk -F'[) (]' '{print $4}')" >> $GITHUB_OUTPUT

# Define the branding for the action in the GitHub Marketplace
branding:
  icon: "award"
  color: "blue"
